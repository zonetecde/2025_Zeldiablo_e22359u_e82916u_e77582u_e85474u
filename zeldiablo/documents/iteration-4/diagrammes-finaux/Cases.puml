@startuml
title Diagramme de classes - Cases

interface Action {
    +onStepOn(Entite entite)
    +onAction(Entite entite, ZeldiabloJeu jeu)
}

abstract class Case {
    -x: int
    -y: int
    -couleur: Color 
    -isWalkable: boolean
    +addItem(Item item)
    +getItem(): Item
    +onStepOn(Entite entite)
    +onAction(Entite entite, ZeldiabloJeu jeu)
    +hasItem(): boolean
    +removeItem(): void
    +getIsWalkable(): boolean
    +setIsWalkable(boolean walkable)
}

class CaseEscalier {
    +onAction(Entite entite, ZeldiabloJeu jeu): void
}

class CaseMur {
}

class CaseOuverture {
    -action: Runnable
    +CaseOuverture(int x, int y, Runnable action)
    +onStepOn(Entite entite): void
}

class CasePancarte {
    +onStepOn(Entite entite): void
}

class CasePiege {
    -degats: int
    +onStepOn(Entite entite): void
    +getDegats(): double
}

class CasePorte {
    -ouverte: boolean
    +ouvrir(): void
}

class CaseVide {
    +hasItem(): boolean
    +removeItem(): void
    +addItem(Item item): void
    +getItem(): Item
}

class Labyrinthe {
    -longueur: int
    -hauteur: int
    -casePorte: CasePorte
    -ouvrirPorte: Runnable
    +Labyrinthe(String nom, ZeldiabloJeu jeu)
    +getCase(int y, int x): Case
    +canEntityMoveTo(int i, int j): boolean
    +deplacerPerso(Direction action, Entite p)
    +estDansLimites(int x, int y): boolean
    +getSuivant(int x, int y, Direction direction): int[]
    +etreFini(): boolean
}

Case ..|> Action
CaseEscalier --|> Case
CaseMur --|> Case
CaseOuverture --|> Case
CasePancarte --|> Case
CasePiege --|> Case
CasePorte --|> Case
CaseVide --|> Case

Labyrinthe --> CasePorte : Possède une porte
Labyrinthe --> CaseOuverture : Possède l'action d'ouverture
Labyrinthe "1" --> "*" Case : gameBoard

@enduml