@startuml
title Diagramme de classes - Entités 

abstract class Entite {
  - x: int
  - y: int
  - hp: double
  - maxHp: double
  - degat: double
  - enVie: boolean
  + Entite(dx: int, dy: int, maxHp: double, degat: double)
  + Entite(dx: int, dy: int)
  + etrePresent(dx: int, dy: int): boolean
  + prendreDegat(d: double): void
  + mettreDegat(cible: Entite): void
  + estMort(): boolean
}

class Monstre {
  - deplacementStrategie: DeplacementStrategie
  + Monstre(x: int, y: int, pv: double, degat: double, intelligence: Intelligence)
  + Monstre(x: int, y: int, intelligence: Intelligence)
  + Monstre(x: int, y: int)
  + deplacer(laby: Labyrinthe): void
  + getDeplacementStrategie(): DeplacementStrategie
  + setDeplacementStrategie(deplacementStrategie: DeplacementStrategie): void
  - setIntelligence(intelligence: Intelligence): void
}

class Player {
  - aGagne: boolean
  - sprite: int
  + Player(dx: int, dy: int, maxHp: double, degat: double)
  + setSpriteJoueur(i: int): void
  + getSpriteJoueur(): int
  + setEnVie(b: boolean): void
  + setInventory(inventory: ArrayList<Item>): void
  + getInventory(): ArrayList<Item>
  + getVie(): double
  + mettreDegat(cible: Entite): void
  + aGagne(): boolean
  + setaGagne(b: boolean): void
  + possedeItem(nomItem: String): boolean
  + clone(): Player
}

enum Intelligence {
  NULLE
  FAIBLE
  MOYENNE
  FORTE
}

class DeplacementStrategieFactory {
  + {static} creerStrategie(intelligence: Intelligence): DeplacementStrategie
}

interface DeplacementStrategie {
  + deplacement(laby: Labyrinthe, monstre: Monstre): void
}

Monstre --|> Entite
Player --|> Entite

Monstre --> Intelligence : intelligence
Monstre --> DeplacementStrategie : deplacementStrategie
Player --> "*" Item : inventory

DeplacementStrategieFactory ..> Intelligence : utilise
Monstre ..> DeplacementStrategieFactory : utilise
DeplacementStrategieFactory ..> DeplacementStrategie : crée

hide Entite::getX
hide Entite::getY
hide Entite::setX
hide Entite::setY
hide Entite::getHp
hide Entite::getMaxHp

@enduml