@startuml diagramme-classes-item

!define ABSTRACT class

abstract class Sprite {
  - imgFile : String
  - img : Image
  + Sprite(s : String)
  + setImg(img : String) : void
  + getImg() : Image
}

abstract class Item {
  - name : String
  - type : TypeItem
  - params : Object[]
  + Item(name : String, img : String, type : TypeItem)
  + getName() : String
  + getType() : TypeItem
  + getParams() : Object[]
  + toString() : String
}

abstract class Case {
  - x : int
  - y : int
 
  + Case(x : int, y : int, couleur : Color, isWalkable : boolean, img : String)
  
  + addItem(item : Item) : void
  + hasItem() : boolean
  + removeItem() : void
  + getItem() : Item
}

enum TypeItem {
  OBJET
  ARME
  CONSOMMABLE
}

class Amulette {
  + Amulette()
}

class Epee {
  + Epee()
}

class Hache {
  + Hache()
}


class Baton {
  + Baton()
}




class CaseVide {
  + CaseVide(x : int, y : int)
  + addItem(item : Item) : void
  + hasItem() : boolean
  + removeItem() : void
  + getItem() : Item
}

class Player {
  + Player(dx : int, dy : int, maxHp : double, degat : double)
  + setInventory(inventory : ArrayList<Item>) : void
  + getInventory() : ArrayList<Item>
  + possedeItem(nomItem : String) : boolean
}

Item --|> Sprite 
Case --|> Sprite
Amulette --|> Item 
Epee --|> Item 
Hache --|> Item
Baton --|> Item
CaseVide --|> Case

Item --> TypeItem : utilise
Case --> Item : utilise

Player --> Item : inventory\n0..*
CaseVide --> Item : item\n0..1

@enduml