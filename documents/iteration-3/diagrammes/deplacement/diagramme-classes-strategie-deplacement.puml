@startuml
interface DeplacementStrategie {
    + deplacement(laby: Labyrinthe, monstre: Monstre): void
}

class DeplacementStatique {
    + deplacement(labyrinthe: Labyrinthe, monstre: Monstre): void
}

class DeplacementHasard {
    + deplacement(laby: Labyrinthe, monstre: Monstre): void
}

class DeplacementRapprochement {
    + deplacement(labyrinthe: Labyrinthe, monstre: Monstre): void
}

class DeplacementIntelligent {
    + deplacement(labyrinthe: Labyrinthe, monstre: Monstre): void
    - calculerDistance(x1: int, y1: int, x2: int, y2: int): double
}

class DeplacementFuyard {
    + deplacement(labyrinthe: Labyrinthe, monstre: Monstre): void
}

abstract class Entite {
    - x: int
    - y: int
    + getX(): int
    + getY(): int
    + setX(): void
    + setY(): void
    + setPosition(y: int, x: int): void
}

class Monstre {
    + Monstre(x: int, y: int, pv: double, degat: double, intelligence: Intelligence)
    + Monstre(x: int, y: int, intelligence: Intelligence)
    + Monstre(x: int, y: int)
    - setIntelligence(intelligence: Intelligence): void
    + deplacer(laby: Labyrinthe): void
}

enum Intelligence {
    NULLE
    FAIBLE
    MOYENNE
    FORTE
}

DeplacementStrategie <|.. DeplacementStatique
DeplacementStrategie <|.. DeplacementHasard
DeplacementStrategie <|.. DeplacementRapprochement
DeplacementStrategie <|.. DeplacementIntelligent
DeplacementStrategie <|.. DeplacementFuyard

Entite <|-- Monstre

Monstre --> DeplacementStrategie : deplacementStrategie
Monstre ..> Intelligence : utilise

hide Entite::hp
hide Entite::maxHp
hide Entite::degat
hide Entite::enVie
hide Entite::etrePresent
hide Entite::prendreDegat
hide Entite::mettreDegat
hide Entite::estMort
hide Entite::getHp
hide Entite::getMaxHp
hide Entite::setEnVie
hide Entite::setInventory
hide Entite::setHp
@enduml